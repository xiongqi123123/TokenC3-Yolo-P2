nc: 1  # 单类小目标检测
scales: # model compound scaling constants, i.e. 'model=yolov13n.yaml' will call yolov13.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.50, 0.25, 1024]   # Nano - 适合快速推理
  s: [0.50, 0.50, 1024]   # Small - 平衡性能
  l: [1.00, 1.00, 512]    # Large - 高精度
  x: [1.00, 1.50, 512]    # Extra Large - 最高精度

# LSNet-Enhanced TokenC3 with P2 Support for Enhanced Small Target Detection
# 基于工作的yolov13_lsnet.yaml，添加P2高分辨率检测支持
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv,  [64, 3, 2]] # 0-P1/2 (320×320, 64ch)
  - [-1, 1, Conv,  [128, 3, 2, 1, 2]] # 1-P2/4 (160×160, 128ch)
  - [-1, 2, TokenC3,  [256, False, 0.25]]  # 2-P2处理 (160×160, 256ch) - 恢复原始格式
  - [-1, 1, Conv,  [256, 3, 2, 1, 4]] # 3-P3/8 (80×80, 256ch)
  - [-1, 2, TokenC3,  [512, False, 0.25]]  # 4-P3处理 (80×80, 512ch) - 恢复原始格式
  - [-1, 1, DSConv,  [512, 3, 2]] # 5-P4/16 (40×40, 512ch)
  - [-1, 4, TokenC3, [512, True, 4]]  # 6-P4处理 (40×40, 512ch) - 恢复原始格式
  - [-1, 1, DSConv,  [1024, 3, 2]] # 7-P5/32 (20×20, 1024ch)
  - [-1, 4, TokenC3, [1024, True, 1]] # 8-P5处理 (20×20, 1024ch) - 恢复原始格式

head:
  # === 保持原有P3/P4/P5架构不变 ===
  - [[4, 6, 8], 2, HyperACE, [512, 8, True, True, 0.5, 1, "both"]]  # 9: 40×40, 512ch
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 10: 80×80, 512ch
  - [ 9, 1, DownsampleConv, []]  # 11: 20×20, 1024ch
  - [[6, 9], 1, FullPAD_Tunnel, []]  # 12: 40×40, 512ch
  - [[4, 10], 1, FullPAD_Tunnel, []]  # 13: 80×80, 512ch
  - [[8, 11], 1, FullPAD_Tunnel, []] # 14: 20×20, 1024ch
  
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 15: 40×40, 1024ch
  - [[-1, 12], 1, Concat, [1]] # 16: 40×40, 1536ch
  - [-1, 2, TokenC3, [512, True]] # 17: 40×40, 512ch - 恢复原始格式
  - [[-1, 9], 1, FullPAD_Tunnel, []]  # 18: 40×40, 512ch

  - [17, 1, nn.Upsample, [None, 2, "nearest"]]  # 19: 80×80, 512ch
  - [[-1, 13], 1, Concat, [1]] # 20: 80×80, 1024ch
  - [-1, 2, TokenC3, [256, True]] # 21: 80×80, 256ch - 恢复原始格式
  - [10, 1, Conv, [256, 1, 1]]  # 22: 80×80, 256ch
  - [[21, 22], 1, FullPAD_Tunnel, []]  # 23: 80×80, 256ch (P3输出)
  
  - [-1, 1, Conv, [256, 3, 2]]  # 24: 40×40, 256ch
  - [[-1, 18], 1, Concat, [1]] # 25: 40×40, 768ch
  - [-1, 2, TokenC3, [512, True]] # 26: 40×40, 512ch - 恢复原始格式
  - [[-1, 9], 1, FullPAD_Tunnel, []]  # 27: 40×40, 512ch (P4输出)

  # === P5处理分支（已注释掉，专注小目标检测） ===
  # - [26, 1, Conv, [512, 3, 2]]  # 28: 20×20, 512ch
  # - [[-1, 14], 1, Concat, [1]] # 29: 20×20, 1536ch
  # - [-1, 2, TokenC3, [1024, True]] # 30: 20×20, 1024ch
  # - [[-1, 11], 1, FullPAD_Tunnel, []]  # 31: 20×20, 1024ch (P5输出)
  
  # === 新增P2处理分支 ===
  - [21, 1, nn.Upsample, [None, 2, "nearest"]]  # 28: 160×160, 256ch (从P3上采样到P2尺寸)
  - [[-1, 2], 1, Concat, [1]]  # 29: 160×160, 512ch (concat backbone P2)
  - [-1, 2, TokenC3, [128, True]]  # 30: 160×160, 128ch (P2最终输出)
  
  # 检测头 - P2/P3/P4三个尺度（专注小目标检测）
  - [[30, 23, 27], 1, Detect, [nc]]  # 31-Detect(P2:160×160, P3:80×80, P4:40×40)

# 设计原理说明:
# 1. 保持原有工作架构：
#    - 保留原有P3/P4的处理流程（索引9-27）
#    - 注释掉P5处理分支，专注小目标检测
#    - 所有FullPAD_Tunnel调用保持不变，确保原有性能
#
# 2. 简洁P2支持：
#    - 从P3特征(21)上采样到P2尺寸(28)
#    - 与backbone P2特征(2)concatenate(29) 
#    - 通过TokenC3处理得到P2输出(30)
#    - 实现P2/P3/P4三尺度检测
#
# 3. 数据流验证：
#    - P2: 160×160, 128ch (新增高分辨率)
#    - P3: 80×80, 256ch (标准小目标)
#    - P4: 40×40, 512ch (中等目标)
#    - 专注小到中等目标检测，简化架构
#
# 4. 优势特性：
#    - 4倍分辨率提升检测极小目标
#    - 保留所有YOLOv13创新优势
#    - 简化架构，专注小目标检测
#    - 更高的推理效率 